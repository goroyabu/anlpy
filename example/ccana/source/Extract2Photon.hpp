/**
   @file   Extract2Photon.hpp
   @date   2020/05/06
   @author goroyabu
   @detail Automatically generated by make_anlpy_project.sh 1.0.0
**/

#ifndef Extract2Photon_hpp
#define Extract2Photon_hpp

#include <TString.h>

#include <VANL_Module.hpp>

class TFile;
class TTree;
class TH1D;
class TCut;

class Extract2Photon : public anl::VANL_Module
{
public:
    Extract2Photon();
    ~Extract2Photon();

    int mod_bgnrun() override;
    int mod_ana() override;
    int mod_endrun() override;

private:
    
    class eventdata
    {
	
    public:
	
	TTree * tree;
	long entry;
	long nentries;
	long selected_entry;
	long selected_nentries;
	
	/** Branches needed for the coincidence judgement **/
	unsigned short gps1pps;
	unsigned short ext1pps;
	unsigned int ext1pps_uint;
	unsigned int msec_counter;

	TString tcut_format;
	
	eventdata(TTree* tree);
	~eventdata(){}    
	
	int external_clock() const { return gps1pps*65536+ext1pps+ext1pps_uint; }
	int time_id() const { return gps1pps*65536+ext1pps+ext1pps_uint; }    
	
	bool GetEntry(long i);    
	long GetSelectedEntries() const ;    
	long GetSelectedCurrentEntry() const { return selected_entry; }
	bool GetSelectedEntry(long i);
	bool NextSelectedEntry();
	static TCut CutOverlap(std::vector<eventdata*> event);
	
    };
    
    class TreeCopier
    {
	
    private:
	
	TFile * outfile;
	TTree * outtree;
	eventdata * indata;
	TH1D * hist;

	long int coin_eventid;
	int coin_delta_t;
	long int m_coin_ext_timeid;
	long int m_coin_int_timeid;
	
    public:
	TreeCopier();
	TreeCopier(std::string outname, eventdata* event);
	~TreeCopier();
	
	int Fill(int delta_t);
	int Close();
	
    };
    
    class MultiTreeReader
    {
	
    public:
	
	MultiTreeReader(){}
	MultiTreeReader(std::vector<eventdata*> event);

	~MultiTreeReader(){}
	
    private:
	
	std::vector<eventdata*> m_event;
	
	int initialize();
	bool next_entry(std::vector<eventdata*>& event);
	
    public:
	
	bool NextCoin(const int window = 100);
	
    };

private:
    
    std::vector<TFile*> file;
    std::vector<eventdata*> event;
    std::vector<TreeCopier*> copier;
    MultiTreeReader multitree;
    // TH1D * hist;
    
};

#endif

