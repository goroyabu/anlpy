/**
   @file   IterateCone3D.hpp
   @date   2020/05/12
   @author 
   @detail Automatically generated by make_anlpy_project.sh 1.0.0
**/

#ifndef IterateCone3D_hpp
#define IterateCone3D_hpp

#include <VANL_Module.hpp>

#include <TFile.h>
#include <TTree.h>
#include <TH3F.h>
#include <TH2D.h>

class IterateCone3D : public anl::VANL_Module
{
    
public:
    
    IterateCone3D();
    ~IterateCone3D();

    int mod_bgnrun() override;
    int mod_ana() override;
    int mod_endrun() override;

public:

    struct resptree_event
    {
	TTree * tree;
	long nentries;
	long current_entry;
	
	TH3F * response;
	resptree_event()
	    : tree(nullptr)
	{
	    response = new TH3F();
	    nentries = 0;
	    current_entry = -1;
	}
	~resptree_event() {}

	long set_branch_address(TTree* tree)
	{
	    this->tree = tree;
	    tree->SetBranchAddress("response", &response);
	    nentries = tree->GetEntries();
	    if ( nentries>0 ) tree->GetEntry(0);
	    return nentries;
	}
	bool next()
	{
	    ++current_entry;
	    if ( current_entry>=nentries ) return false;
	    tree->GetEntry(current_entry);
	    return true;
	}	
    };

    class TH3Slicer
    {
    public:
	static std::vector<TH2D*> Slice(TH3F* th3);
    private:
	static TH2D* define_slice(TH3F* th3, int slice_axis=2);
    };
    
protected:
    
    TFile * input_file;
    TTree * input_tree;
    TFile * output_file;
    resptree_event event;
    TH3F * sbp_image;

    /* Parameters */
    int n_of_iterations;
};

#endif

