/**
   @file   IterateCone3D.cpp
   @date   2020/05/12
   @author 
   @detail Automatically generated by make_anlpy_project.sh 1.0.0
**/

#include "IterateCone3D.hpp"

#include <iostream>
using std::cout;
using std::endl;

#include <bnk.hpp>
#include <evs.hpp>

IterateCone3D::IterateCone3D()
    : anl::VANL_Module("IterateCone3D", "0.1"),
      input_file(nullptr), input_tree(nullptr), output_file(nullptr), sbp_image(nullptr)
{
    /** Parameters can be modified via a method 'SetParameter' in Python **/
    // define_parameter<std::string>("input_file", "input.txt");
    define_parameter<std::string>("input_file", "input.root");
    define_parameter<std::string>("input_tree", "resptree");
    define_parameter<std::string>("output_file", "output.root");
    define_parameter<int>("n_of_iterations", 0);
}
IterateCone3D::~IterateCone3D()
{
}

int IterateCone3D::mod_bgnrun()
{
    auto input_file_name = get_parameter<std::string>("input_file");
    input_file = new TFile( input_file_name.c_str() );
    if ( !input_file || input_file->IsZombie() ) {
	cout << "Opening " << input_file_name << " is failed." << endl;
	return anl::ANL_NG;
    }
    cout << input_file_name << " is opened." << endl;

    auto input_tree_name = get_parameter<std::string>("input_tree");
    input_tree = (TTree*)input_file->Get( input_tree_name.c_str() );
    if ( !input_tree ) {
	cout << input_tree_name << " is not found." << endl;
	return anl::ANL_NG;
    }

    auto nentries = event.set_branch_address(input_tree);
    if ( nentries==0 ) {
	cout << input_tree_name << " has NO event." << endl;
	return anl::ANL_NG;
    }
    cout << "# of entries in " << input_tree_name << " is " << nentries << endl;
    
    auto ofname = get_parameter<std::string>("output_file");
    output_file = new TFile( ofname.c_str(), "recreate" );
    if ( !output_file || output_file->IsZombie() ) {
        cout << "Creating " << ofname << " is failed." << endl;
        return anl::ANL_NG;
    }
    cout << ofname << " is created." << endl;

    sbp_image = (TH3F*)event.response->Clone();
    sbp_image->SetName("sbp_image");

    n_of_iterations = get_parameter<int>("n_of_iterations");
    
    return anl::ANL_OK;
}

int IterateCone3D::mod_ana()
{
    if ( !event.next() ) return anl::ANL_LOOP;

    sbp_image->Add( event.response );
    
    return anl::ANL_OK;
}

int IterateCone3D::mod_endrun()
{
    output_file->cd();
    sbp_image->Write();
    output_file->Close();    
    input_file->Close();
    return anl::ANL_OK;
}

