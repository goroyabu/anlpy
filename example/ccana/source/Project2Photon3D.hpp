/**
   @file   Project2Photon3D.hpp
   @date   2020/05/18
   @author 
   @detail Automatically generated by make_anlpy_project.sh 1.0.0
**/

#ifndef Project2Photon3D_hpp
#define Project2Photon3D_hpp

#include <VANL_Module.hpp>
#include "ProjectCone3D.hpp"

class Project2Photon3D : public anl::VANL_Module
{
public:
    Project2Photon3D();
    ~Project2Photon3D();

    int mod_bgnrun() override;
    int mod_ana() override;
    int mod_endrun() override;

private:

    std::map<int, ProjectCone3D*> projectors;
    TFile * outfile;
    TH2D * h2_energy_coin;
    TH1D * h1_energy_cc1;
    TH1D * h1_energy_cc2;

    TH2D * h2_energy_cc2;
    TH2D * h2_energy_cc1;
    
    TH1D * h1_delta_t_2photon;

    TH1D * h1_si_cc1_peak1;
    TH1D * h1_si_cc1_peak2;
    TH1D * h1_si_cc2_peak1;
    TH1D * h1_si_cc2_peak2;
    
    // TH2D * h2_energy_cc2_in_theta;
    // TH2D * h2_energy_cc1_in_theta;   

    double e1_peak_energy, e2_peak_energy;
    double e1_window_begin, e1_window_end;
    double e2_window_begin, e2_window_end;
    int time_window;

    bool use_si_energy_only;
    bool is_event_list_only;
    bool use_fluor_event;

    bool is_simulation_data_mode;
    
    inline bool is_in_energy_range1(double energy)
    {
	return e1_window_begin<=energy && energy<=e1_window_end;	
    }
    inline bool is_in_energy_range2(double energy)
    {
	return e2_window_begin<=energy && energy<=e2_window_end;	
    }    

    TFile* open_file(std::string file_name);

    std::tuple<ProjectCone3D::hit, ProjectCone3D::hit>
    convert_coordinate(int camera_id, const ProjectCone3D::hit& si, const ProjectCone3D::hit& cdte);
    
};

#endif

