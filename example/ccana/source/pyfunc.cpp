/**
   @file   pyfunc.cpp
   @date   2020/05/06
   @author goroyabu
   @detail Automatically generated by make_anlpy_project.sh 1.0.0
**/

#include "ProjectCone3D.hpp"
#include "IterateCone3D.hpp"

#include "Extract2Photon.hpp"
#include "Project2Photon3D.hpp"
#include "Iterate2Photon3D.hpp"
#include "PETimager.hpp"

#include "ProjectConeETCC.hpp"
#include "FilterComptree.hpp"

#include <pybind11/pybind11.h>

PYBIND11_MODULE(ccana, m) {
    m.attr("__name__") = "ccana";
    m.doc() = R"pbdoc(
        ccana Documentation
        -----------------------
    )pbdoc";

    pybind11::class_<anl::VANL_Module>(m, "VANL_Module", pybind11::module_local());

    pybind11::class_<ProjectCone3D, anl::VANL_Module>(m, "ProjectCone3D")
	.def(pybind11::init<>())
	.def("SetParameter", &ProjectCone3D::set_parameter<int>)
	.def("SetParameter", &ProjectCone3D::set_parameter<double>)
	.def("SetParameter", &ProjectCone3D::set_parameter<bool>)
	.def("SetParameter", &ProjectCone3D::set_parameter<std::string>)
	.def("DefineParameter", &ProjectCone3D::define_parameter<int>)
	.def("DefineParameter", &ProjectCone3D::define_parameter<double>)
	.def("DefineParameter", &ProjectCone3D::define_parameter<bool>)
	.def("DefineParameter", &ProjectCone3D::define_parameter<std::string>)
	.def("ShowParameter", &ProjectCone3D::show_parameters);

    pybind11::class_<IterateCone3D, anl::VANL_Module>(m, "IterateCone3D")
	.def(pybind11::init<>())
	.def("SetParameter", &IterateCone3D::set_parameter<int>)
	.def("SetParameter", &IterateCone3D::set_parameter<double>)
	.def("SetParameter", &IterateCone3D::set_parameter<bool>)
	.def("SetParameter", &IterateCone3D::set_parameter<std::string>)
	.def("DefineParameter", &IterateCone3D::define_parameter<int>)
	.def("DefineParameter", &IterateCone3D::define_parameter<double>)
	.def("DefineParameter", &IterateCone3D::define_parameter<bool>)
	.def("DefineParameter", &IterateCone3D::define_parameter<std::string>)
	.def("ShowParameter", &IterateCone3D::show_parameters);

    pybind11::class_<Extract2Photon, anl::VANL_Module>(m, "Extract2Photon")
	.def(pybind11::init<>())
	.def("SetParameter", &Extract2Photon::set_parameter<int>)
	.def("SetParameter", &Extract2Photon::set_parameter<double>)
	.def("SetParameter", &Extract2Photon::set_parameter<bool>)
	.def("SetParameter", &Extract2Photon::set_parameter<std::string>)
	.def("DefineParameter", &Extract2Photon::define_parameter<int>)
	.def("DefineParameter", &Extract2Photon::define_parameter<double>)
	.def("DefineParameter", &Extract2Photon::define_parameter<bool>)
	.def("DefineParameter", &Extract2Photon::define_parameter<std::string>)
	.def("ShowParameter", &Extract2Photon::show_parameters);

    pybind11::class_<Project2Photon3D, anl::VANL_Module>(m, "Project2Photon3D")
	.def(pybind11::init<>())
	.def("SetParameter", &Project2Photon3D::set_parameter<int>)
	.def("SetParameter", &Project2Photon3D::set_parameter<double>)
	.def("SetParameter", &Project2Photon3D::set_parameter<bool>)
	.def("SetParameter", &Project2Photon3D::set_parameter<std::string>)
	.def("DefineParameter", &Project2Photon3D::define_parameter<int>)
	.def("DefineParameter", &Project2Photon3D::define_parameter<double>)
	.def("DefineParameter", &Project2Photon3D::define_parameter<bool>)
	.def("DefineParameter", &Project2Photon3D::define_parameter<std::string>)
	.def("ShowParameter", &Project2Photon3D::show_parameters);

    pybind11::class_<Iterate2Photon3D, anl::VANL_Module>(m, "Iterate2Photon3D")
	.def(pybind11::init<>())
	.def("SetParameter", &Iterate2Photon3D::set_parameter<int>)
	.def("SetParameter", &Iterate2Photon3D::set_parameter<double>)
	.def("SetParameter", &Iterate2Photon3D::set_parameter<bool>)
	.def("SetParameter", &Iterate2Photon3D::set_parameter<std::string>)
	.def("DefineParameter", &Iterate2Photon3D::define_parameter<int>)
	.def("DefineParameter", &Iterate2Photon3D::define_parameter<double>)
	.def("DefineParameter", &Iterate2Photon3D::define_parameter<bool>)
	.def("DefineParameter", &Iterate2Photon3D::define_parameter<std::string>)
	.def("ShowParameter", &Iterate2Photon3D::show_parameters);

    pybind11::class_<PETimager, anl::VANL_Module>(m, "PETimager")
	.def(pybind11::init<>())
	.def("SetParameter", &PETimager::set_parameter<int>)
	.def("SetParameter", &PETimager::set_parameter<double>)
	.def("SetParameter", &PETimager::set_parameter<bool>)
	.def("SetParameter", &PETimager::set_parameter<std::string>)
	.def("DefineParameter", &PETimager::define_parameter<int>)
	.def("DefineParameter", &PETimager::define_parameter<double>)
	.def("DefineParameter", &PETimager::define_parameter<bool>)
	.def("DefineParameter", &PETimager::define_parameter<std::string>)
	.def("ShowParameter", &PETimager::show_parameters);

    pybind11::class_<ProjectConeETCC, anl::VANL_Module>(m, "ProjectConeETCC")
	.def(pybind11::init<>())
	.def("SetParameter", &ProjectConeETCC::set_parameter<int>)
	.def("SetParameter", &ProjectConeETCC::set_parameter<double>)
	.def("SetParameter", &ProjectConeETCC::set_parameter<bool>)
	.def("SetParameter", &ProjectConeETCC::set_parameter<std::string>)
	.def("DefineParameter", &ProjectConeETCC::define_parameter<int>)
	.def("DefineParameter", &ProjectConeETCC::define_parameter<double>)
	.def("DefineParameter", &ProjectConeETCC::define_parameter<bool>)
	.def("DefineParameter", &ProjectConeETCC::define_parameter<std::string>)
	.def("ShowParameter", &ProjectConeETCC::show_parameters);

    pybind11::class_<FilterComptree, anl::VANL_Module>(m, "FilterComptree")
        .def(pybind11::init<>())
        .def("SetParameter", &FilterComptree::set_parameter<int>)
        .def("SetParameter", &FilterComptree::set_parameter<double>)
        .def("SetParameter", &FilterComptree::set_parameter<bool>)
        .def("SetParameter", &FilterComptree::set_parameter<std::string>)
        .def("DefineParameter", &FilterComptree::define_parameter<int>)
        .def("DefineParameter", &FilterComptree::define_parameter<double>)
        .def("DefineParameter", &FilterComptree::define_parameter<bool>)
        .def("DefineParameter", &FilterComptree::define_parameter<std::string>)
        .def("ShowParameter", &FilterComptree::show_parameters);

#ifdef VERSION_INFO
    m.attr("__version__") = VERSION_INFO;
#else
    m.attr("__version__") = "dev";
#endif
}
