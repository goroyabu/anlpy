/**
   @file   ExtractCompton.hpp
   @date   2020/09/09
   @author 
   @detail Automatically generated by make_anlpy_project.sh 1.0.0
**/

#ifndef ExtractCompton_hpp
#define ExtractCompton_hpp

#include <sstream>
#include <TMath.h>
#include <TVector3.h>

#include <VANL_Module.hpp>

class ExtractCompton : public anl::VANL_Module
{

public:
    
    static inline std::vector<std::string> split
    (const std::string& in, const std::string& delim=",")
    {
	std::vector<std::string> out;
	std::stringstream ss(in); std::string word;	
	while( std::getline(ss, word, delim.c_str()[0]) )
	    out.emplace_back(word);
	return out;
    }
    static inline std::vector<double> split_to_double
    (const std::string& in, const std::string& delim=",")
    {
	auto vstr = split(in, delim);
	std::vector<double> out;
	for ( auto str : vstr )
	    out.emplace_back( std::stof(str) );
	return out;
    }
    static inline double compton_angle
    (const double scat, const double abso)
    {
        auto cos = 1 - 511.0 * ( 1/abso - 1/(scat+abso) );
        if ( cos <= -1.0 or 1.0 <= cos )
            return -1;
        auto deg = TMath::RadToDeg()*TMath::ACos(cos);
        return std::fabs( deg );
    }
    static inline double angle_of_3points
    (const TVector3& orig, const TVector3& scat, const TVector3& abso)
    {
        auto org_to_scat = scat - orig;
        auto scat_to_abso = abso - scat;
        auto rad = org_to_scat.Angle(scat_to_abso);
        auto deg = TMath::RadToDeg()*rad;
        return std::fabs( deg );
    }
    static inline bool is_fluor_of_cdte(double energy)
    {
	return 21<=energy && energy<=28;
    }
    
private:

    struct list_of_parameters
    {
	double si_threshold;
	double cdte_threshold;

	double si_energy_max;
	double cdte_energy_max;

	// std::vector<double> incident_energy_list;
	// double energy_window_half;	

	double delta_e_cdte_maximum;
	
	TVector3 source_origin;
	// bool is_in_energy_window(double e)
	// {
	//     for ()
	// }
	
    } parameter;
    
public:
    
    ExtractCompton();
    ~ExtractCompton();

    int mod_bgnrun() override;
    int mod_ana() override;
    int mod_endrun() override;

    struct hit
    {
        int detid;
        double epi;
        double epi_x;
        double epi_y;
        double pos_x;
        double pos_y;
        double pos_z;
        int strip_x;
        int strip_y;
        double init_x;
        double init_y;
        double init_z;

	hit()
	{
	    detid   = -1;
	    epi     = 0.0;
	    epi_x   = 0.0;
	    epi_y   = 0.0;
	    pos_x   = 0.0;
	    pos_y   = 0.0;
	    pos_z   = 0.0;
	    strip_x = -1;
	    strip_y = -1;
	    init_x  = 0.0;
	    init_y  = 0.0;
	    init_z  = 0.0;
	}
	
	hit(const hit& other)
	{
	    detid   = other.detid;
	    epi     = other.epi;
	    epi_x   = other.epi_x;
	    epi_y   = other.epi_y;
	    pos_x   = other.pos_x;
	    pos_y   = other.pos_y;
	    pos_z   = other.pos_z;	    	    
	    strip_x = other.strip_x;
	    strip_y = other.strip_y;
	    init_x  = other.init_x;
	    init_y  = other.init_y;
	    init_z  = other.init_z;	    
	}

	hit& operator=(const hit& other)
	{
	    detid   = other.detid;
	    epi     = other.epi;
	    epi_x   = other.epi_x;
	    epi_y   = other.epi_y;
	    pos_x   = other.pos_x;
	    pos_y   = other.pos_y;
	    pos_z   = other.pos_z;	    	    
	    strip_x = other.strip_x;
	    strip_y = other.strip_y;
	    init_x  = other.init_x;
	    init_y  = other.init_y;
	    init_z  = other.init_z;	    
	    return *this;
	}
    };

    static inline int GetStripID(double x, int axis=0)
    {
        static const double width = 0.25;
        static const int nch = 128;
        static const double xaxis_min = -width*nch*0.5;

        for ( int ch=0; ch<nch; ++ch ) {

            auto xbegin = xaxis_min + ch*width;
            auto xend = xbegin + width;

            if ( xbegin<=x && x<=xend ) {
                if ( axis==0 ) return ch;
                else return ch + 128;
            }
        }
        return -1;
    }
    inline int GetStripIDX(double x) { return GetStripID(x, 0);  }
    inline int GetStripIDY(double y) { return GetStripID(y, -1); }

    inline static bool IsCdTe(int detid) { return detid>=2;       }
    inline static bool IsSi  (int detid) { return !IsCdTe(detid); }
    
};

#endif

