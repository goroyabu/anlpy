/**
   @file   ConvertToLv1Data.hpp
   @date   2020/09/03
   @author 
   @detail Automatically generated by make_anlpy_project.sh 1.0.0
**/

#ifndef ConvertToLv1Data_hpp
#define ConvertToLv1Data_hpp

#include <VANL_Module.hpp>
#include <tuple>

class ConvertToLv1Data : public anl::VANL_Module
{
public:
    ConvertToLv1Data();
    ~ConvertToLv1Data();

    int mod_bgnrun() override;
    int mod_ana() override;
    int mod_endrun() override;

private:

    inline std::vector<int>convert_stripid_x
    (int nhits, const std::vector<int>& detid, const std::vector<int>& stripid)
    {
	std::vector<int> new_array;
	for ( int ihit=0; ihit<nhits; ++ihit) {	    
	    auto new_stripid = detid[ihit] * 256 + stripid[ihit] - 1;
	    // std::cout << detid[ihit] << " " << stripid[ihit];
	    // std::cout << " -> " << new_stripid << std::endl;
	    new_array.emplace_back( new_stripid );
	}
	return new_array;
    }
    inline std::vector<int>convert_stripid_y
    (int nhits, const std::vector<int>& detid, const std::vector<int>& stripid)
    {
	std::vector<int> new_array;
	for ( int ihit=0; ihit<nhits; ++ihit) {
	    auto asicid = 7 - (int)(stripid[ihit] - 1)/32;
	    auto asicch = (int)(stripid[ihit] - 1)%32;
	    auto new_stripid = detid[ihit] * 256 + asicid*32 + asicch;
	    // auto new_stripid = detid[ihit] * 256 + 128 + stripid[ihit] - 1;
	    // std::cout << detid[ihit] << " " << stripid[ihit];
	    // std::cout << " -> " << new_stripid << std::endl;	    
	    new_array.emplace_back( new_stripid );
	}
	return new_array;
    }    
};

#endif

