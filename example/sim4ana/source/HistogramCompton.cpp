/**
   @file   HistogramCompton.cpp
   @date   2020/09/09
   @author 
   @detail Automatically generated by make_anlpy_project.sh 1.0.0
**/

#include "HistogramCompton.hpp"

#include <utility>

#include <iostream>
using std::cout;
using std::cerr;
using std::endl;

#include <bnk.hpp>
#include <evs.hpp>

HistogramCompton::histos_each_layer::histos_each_layer(int detector_id, TString sub)
    : detid(detector_id), subname(sub)
{
    static const int nbins = 2000;
    static const double xmin = 0.0;
    static const double xmax = 1000.0;
    
    th2_energy_spectra_each_channels
	= new TH2D( Form("spect2d_ch_detid%d"+subname, detector_id),
		    Form("detid%d"+subname+";ch(0-127=Pt, 128-255=Al);keV",detector_id),
		    256, -0.5, 255.5, nbins*0.25, xmin, xmax );

    auto hname = th2_energy_spectra_each_channels->GetName();

    if ( th2_energy_spectra_each_channels!=nullptr ) {
	cout << "histogram : " << hname << " is defined." << endl;
    }
    else
	cerr << "Creating " << hname << " is failed." << endl;
    
    th1_energy_spectra = nullptr;

    th2_energy_correlation
	= new TH2D( Form("ene_corr_detid%d"+subname, detector_id),
		    Form("detid%d"+subname+";ave=(Y+X)/2[keV];diff=(Y-X)/2[keV]",
			 detector_id ),
		    nbins*0.25, xmin, xmax, 100, -50, 50
		    );
    
}
void HistogramCompton::histos_each_layer::Write()
{

    if ( detid<2 )
	th1_energy_spectra = th2_energy_spectra_each_channels->ProjectionY("py",1,128);
    else
	th1_energy_spectra = th2_energy_spectra_each_channels->ProjectionY("py",129,256);
    th1_energy_spectra->SetNameTitle( Form("spect1d_ch_detid%d"+subname, detid),
				      Form("detid%d"+subname+";keV",detid));    
    th2_energy_spectra_each_channels->Write();
    th1_energy_spectra->Write();

    th2_energy_correlation->Write();
}

HistogramCompton::histo2d_energy_vs_energy::histo2d_energy_vs_energy()
{
    static const int nbins = 2000;
    static const double xmin = 0.0;
    static const double xmax = 1000.0;
    
    std::vector<std::tuple<std::string,std::string>> hlist =
	{
	 { "th2_eplot_si1_cdte1", "Energy Si1 vs CdTe1" },
	 { "th2_eplot_si1_cdte2", "Energy Si1 vs CdTe2" },
	 { "th2_eplot_si1_cdte3", "Energy Si1 vs CdTe3" },
	 { "th2_eplot_si2_cdte1", "Energy Si2 vs CdTe1" },
	 { "th2_eplot_si2_cdte2", "Energy Si2 vs CdTe2" },
	 { "th2_eplot_si2_cdte3", "Energy Si2 vs CdTe3" },
	 { "th2_eplot_si1_cdte1_ecut", "Energy Si1 vs CdTe1 after ethre cut" },
	 { "th2_eplot_si1_cdte2_ecut", "Energy Si1 vs CdTe2 after ethre cut" },
	 { "th2_eplot_si1_cdte3_ecut", "Energy Si1 vs CdTe3 after ethre cut" },
	 { "th2_eplot_si2_cdte1_ecut", "Energy Si2 vs CdTe1 after ethre cut" },
	 { "th2_eplot_si2_cdte2_ecut", "Energy Si2 vs CdTe2 after ethre cut" },
	 { "th2_eplot_si2_cdte3_ecut", "Energy Si2 vs CdTe3 after ethre cut" }	 
	};

    for ( auto [ hname, htitle ] : hlist ) {
	this->histo[ hname ]
	    = new TH2D( hname.c_str(), (TString)htitle.c_str()+";keV;keV",
			nbins, xmin, xmax, nbins, xmin, xmax
			);
	cout << "histogram : " << hname << " is defined." << endl;
    }

    for ( auto [ hname, h ] : histo ) {
	cout << hname << endl;
	cout << h->GetName() << endl;
    }
}
void HistogramCompton::histo2d_energy_vs_energy::Write()
{
    for ( auto [ hname, h ] : histo ) {
	h->Write();
    }
}

HistogramCompton::histo2d_hitpattern::histo2d_hitpattern(TString subname)
{
    histo_2hits =
	new TH2D( (TString)"hit_pattern_nhits2"+subname,
		  "Hit-patterns 2Hits;0=Si1,1=Si2;2=CdTe1,3=CdTe2,4=CdTe3",
		  5, -0.5, 4.5, 5, -0.5, 4.5 );
    
    histo_3hits =
	new TH2D( (TString)"hit_pattern_nhits3"+subname,
		  "Hit-patterns 3Hits;Hit1;Hit2+Hit3",
		  5, -0.5, 4.5, 15, -0.5, 14.5 );
}
void HistogramCompton::histo2d_hitpattern::Fill2Hits(int det1, int det2)
{
    std::vector<int> det = { det1, det2 };
    std::sort( det.begin(), det.end() );
    histo_2hits->Fill( det[0], det[1] );
}
void HistogramCompton::histo2d_hitpattern::Fill3Hits(int det1, int det2, int det3)
{
    std::vector<int> det = { det1, det2, det3 };
    std::sort( det.begin(), det.end() );
    auto hitid = hit_pattern_id( det[1], det[2] );
    histo_3hits->Fill( det[0], hitid );
}
void HistogramCompton::histo2d_hitpattern::Write()
{
    histo_2hits->Write();
    histo_3hits->Write();
}


HistogramCompton::HistogramCompton()
    : anl::VANL_Module("HistogramCompton", "0.1")
{
    define_parameter<std::string>( "output_file", "output.root" );
    output_file = nullptr;
    th2_energy_vs_energy = nullptr;
}
HistogramCompton::~HistogramCompton()
{
}

int HistogramCompton::mod_bgnrun()
{
    cout << "HistogramCompton::mod_bgnrun() start" << endl;
    auto output_filename = get_parameter<std::string>( "output_file" );
    
    output_file = new TFile( output_filename.c_str(), "recreate" );
    if ( output_file==nullptr || output_file->IsZombie() )
	return anl::ANL_NG;

    // histos = new std::vector<int,histos_each_layer*>();
    std::vector<int> detid_list = { 0, 1, 2, 3, 4 };
    for ( auto detid : detid_list ) {
    	histos[ detid ] = new histos_each_layer(detid);
	histos_ecut[ detid ] = new histos_each_layer(detid, "_ecut");
    }

    evs::define("Si1_CdTe1_2Hits_Before_Cut");
    evs::define("Si1_CdTe2_2Hits_Before_Cut");
    evs::define("Si1_CdTe3_2Hits_Before_Cut");
    evs::define("Si2_CdTe1_2Hits_Before_Cut");
    evs::define("Si2_CdTe2_2Hits_Before_Cut");
    evs::define("Si2_CdTe3_2Hits_Before_Cut");
    evs::define("Si1_CdTe1_2Hits_After_Cut");
    evs::define("Si1_CdTe2_2Hits_After_Cut");
    evs::define("Si1_CdTe3_2Hits_After_Cut");
    evs::define("Si2_CdTe1_2Hits_After_Cut");
    evs::define("Si2_CdTe2_2Hits_After_Cut");
    evs::define("Si2_CdTe3_2Hits_After_Cut");
    
    th2_energy_vs_energy = new histo2d_energy_vs_energy();

    static const int nbins = 2000;
    static const double xmin = 0.0;
    static const double xmax = 1000.0;    

    th1_total_energy_spectra_comtpon
	= new TH1D( "total_compton_detid",
		    "Si+CdTe Compton detid;keV",
		    nbins*0.25, xmin, xmax );    

    th2_hit_pattern = new histo2d_hitpattern();
    th2_hit_pattern_ecut = new histo2d_hitpattern("_ecut");
    
    return anl::ANL_OK;
}

int HistogramCompton::mod_ana()
{
    auto detid  = bnk::getv<int>   ( "detid_lv3_mod" );
    auto epi    = bnk::getv<float>( "epi_lv3_mod"   );
    auto epi_x  = bnk::getv<float>( "epi_x_lv3" );
    auto epi_y  = bnk::getv<float>( "epi_y_lv3" );
    auto pos_x  = bnk::getv<float>( "pos_x_lv3" );
    auto pos_y  = bnk::getv<float>( "pos_y_lv3" );
    auto pos_z  = bnk::getv<float>( "pos_z_lv3" );
    // auto init_x = bnk::get<double> ( "init_x"    );
    // auto init_y = bnk::get<double> ( "init_y"    );
    // auto init_z = bnk::get<double> ( "init_z"    );
    
    auto strip_x = bnk::getv<int>   ( "strip_x_lv3" );
    auto strip_y = bnk::getv<int>   ( "strip_y_lv3" );

    auto hitid = bnk::getv<int>( "hitid_over_ethre" );

    auto nhits_all = (int)detid.size();
    
    for ( int ihit=0; ihit<nhits_all; ++ihit ) {
	
    	auto hist = histos[ detid[ihit] ];

    	hist->th2_energy_spectra_each_channels
    	    ->Fill( strip_x[ihit], epi_x[ihit] );
	hist->th2_energy_spectra_each_channels
    	    ->Fill( strip_y[ihit], epi_y[ihit] );

	auto epi_ave  = ( epi_y[ihit]+epi_x[ihit] ) * 0.5;
	auto epi_diff = ( epi_y[ihit]-epi_x[ihit] ) * 0.5;
	hist->th2_energy_correlation->Fill( epi_ave, epi_diff );	
    }
        
    if ( nhits_all==2 ) {

	std::vector<int>    det = { detid[0], detid[1] };
	std::vector<double> ene = { epi[0],   epi[1]   };       
	
	if ( det[0]>det[1] ) {
	    std::swap( det[0], det[1] );
	    std::swap( ene[0], ene[1] ); 
	}

	th2_hit_pattern->Fill2Hits( det[0], det[1] );
	
	if ( det[0]==0 && det[1]==2 ) {
	    evs::set("Si1_CdTe1_2Hits_Before_Cut");	    
	    th2_energy_vs_energy->histo
		["th2_eplot_si1_cdte1"]->Fill( ene[0], ene[1]);
	}	
	else if ( det[0]==0 && det[1]==3 ) {
	    evs::set("Si1_CdTe2_2Hits_Before_Cut");
	    th2_energy_vs_energy->histo
		["th2_eplot_si1_cdte2"]->Fill( ene[0], ene[1]);
	}
	else if ( det[0]==0 && det[1]==4 ) {
	    evs::set("Si1_CdTe3_2Hits_Before_Cut");
	    th2_energy_vs_energy->histo
		["th2_eplot_si1_cdte3"]->Fill( ene[0], ene[1]);
	}
	else if ( det[0]==1 && det[1]==2 ) {
	    evs::set("Si2_CdTe1_2Hits_Before_Cut");
	    th2_energy_vs_energy->histo
		["th2_eplot_si2_cdte1"]->Fill( ene[0], ene[1]);
	}
	else if ( det[0]==1 && det[1]==3 ) {
	    evs::set("Si2_CdTe2_2Hits_Before_Cut");
	    th2_energy_vs_energy->histo
		["th2_eplot_si2_cdte2"]->Fill( ene[0], ene[1]);		    
	}
	else if ( det[0]==1 && det[1]==4 ) {
	    evs::set("Si2_CdTe3_2Hits_Before_Cut");
	    th2_energy_vs_energy->histo
		["th2_eplot_si2_cdte3"]->Fill( ene[0], ene[1]);	    
	}
    }
    else if ( nhits_all==3 ) {
	
	th2_hit_pattern->Fill3Hits( detid[0], detid[1], detid[2] );
	
    }
    
    
    auto nhits_over_thre = (int)hitid.size();
    if ( nhits_over_thre<1 ) return anl::ANL_OK;    
    
    if ( evs::get( "Si_CdTe_Coin_After_Cut" )==false ) return anl::ANL_OK;
    
    if ( nhits_over_thre==2 ) {
	std::vector<double> ene = { epi[ hitid[0] ], epi[ hitid[1] ] };
	if ( detid[ hitid[0] ]>detid[ hitid[1] ] ) 
	    std::swap( ene[0], ene[1] ); 

	th2_hit_pattern_ecut->Fill2Hits( detid[hitid[0]], detid[hitid[1]] );

	
	if ( evs::get("Hit_on_Si1_After_Cut") &&
	     evs::get("Hit_on_CdTe1_After_Cut") ) {
	    th2_energy_vs_energy->histo
		["th2_eplot_si1_cdte1_ecut"]->Fill( ene[0], ene[1]);
	    evs::set("Si1_CdTe1_2Hits_After_Cut");
	}

	else if ( evs::get("Hit_on_Si1_After_Cut") &&
		  evs::get("Hit_on_CdTe2_After_Cut") ) {
	    th2_energy_vs_energy->histo
		["th2_eplot_si1_cdte2_ecut"]->Fill( ene[0], ene[1]);
	    evs::set("Si1_CdTe2_2Hits_After_Cut");
	}

	else if ( evs::get("Hit_on_Si1_After_Cut") &&
		  evs::get("Hit_on_CdTe3_After_Cut") ) {
	    th2_energy_vs_energy->histo
		["th2_eplot_si1_cdte3_ecut"]->Fill( ene[0], ene[1]);
	    evs::set("Si1_CdTe3_2Hits_After_Cut");
	}

	else if ( evs::get("Hit_on_Si2_After_Cut") &&
		  evs::get("Hit_on_CdTe1_After_Cut") ) {
	    th2_energy_vs_energy->histo
		["th2_eplot_si2_cdte1_ecut"]->Fill( ene[0], ene[1]);
	    evs::set("Si2_CdTe1_2Hits_After_Cut");
	}

	else if ( evs::get("Hit_on_Si2_After_Cut") &&
		  evs::get("Hit_on_CdTe2_After_Cut") ) {
	    th2_energy_vs_energy->histo
		["th2_eplot_si2_cdte2_ecut"]->Fill( ene[0], ene[1]);
	    evs::set("Si2_CdTe2_2Hits_After_Cut");
	}

	else if ( evs::get("Hit_on_Si2_After_Cut") &&
		  evs::get("Hit_on_CdTe3_After_Cut") ) {
	    th2_energy_vs_energy->histo
		["th2_eplot_si2_cdte3_ecut"]->Fill( ene[0], ene[1]);
	    evs::set("Si2_CdTe3_2Hits_After_Cut");
	}
    }
    else if ( nhits_over_thre==3 ) {

	std::vector<std::tuple<int,double>> hits
	    = { { detid[ hitid[0] ], epi[ hitid[0] ] },
		{ detid[ hitid[1] ], epi[ hitid[1] ] },
		{ detid[ hitid[2] ], epi[ hitid[2] ] }  };
	
	std::sort( hits.begin(), hits.end(),
		   []( auto ha, auto hb ) {
		       auto [ da, ea ] = ha;
		       auto [ db, eb ] = hb;
		       return da < db;
		   });

	th2_hit_pattern_ecut->Fill3Hits( detid[hitid[0]],
					 detid[hitid[1]], detid[hitid[2]] );
	
    }

    if ( evs::get( "Si_CdTe_2Hits_After_Cut" )==false ) return anl::ANL_OK;
    
    std::vector<double> ene = { epi[ hitid[0] ], epi[ hitid[1] ] };
    if ( detid[ hitid[0] ]>detid[ hitid[1] ] ) 
	std::swap( ene[0], ene[1] ); 
    th1_total_energy_spectra_comtpon->Fill( ene[0]+ene[1] );	        
    
    for ( int ihit=0; ihit<nhits_over_thre; ++ihit ) {
    	int id = hitid[ihit];
    	auto hist = histos_ecut[ detid[id] ];
	if ( hist==nullptr ) {
	    continue;
	}	
    	hist->th2_energy_spectra_each_channels
    	    ->Fill( strip_x[id], epi_x[id] );
    	hist->th2_energy_spectra_each_channels
    	    ->Fill( strip_y[id], epi_y[id] );

	auto epi_ave  = ( epi_y[id]+epi_x[id] ) * 0.5;
	auto epi_diff = ( epi_y[id]-epi_x[id] ) * 0.5;
	hist->th2_energy_correlation->Fill( epi_ave, epi_diff );
    }        
    
    return anl::ANL_OK;
}

int HistogramCompton::mod_endrun()
{

    output_file->cd();

    for ( auto [ detid, hist ] : histos ) {
	if ( hist!=nullptr ) hist->Write();
    }

    for ( auto [ detid, hist ] : histos_ecut ) {
	if ( hist!=nullptr ) hist->Write();
    }    
    
    th2_energy_vs_energy->Write();

    th2_hit_pattern->Write();
    th2_hit_pattern_ecut->Write();

    th1_total_energy_spectra_comtpon->Write();
    
    output_file->Close();
    
    return anl::ANL_OK;
}

